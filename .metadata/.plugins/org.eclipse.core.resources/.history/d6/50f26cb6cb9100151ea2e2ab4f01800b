package tests;
import static org.mockito.Mockito.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;
import static org.junit.Assert.*;

import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.ExpectedSystemExit;

import Yatzy.Dice;
import Yatzy.Points;
import Yatzy.game;



public class mainTest {
	//private field with minumum and maximun values allowed
	private static final int min = 1;
	private static final int max = 6;
	public final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	
	@Rule
    public final ExpectedSystemExit exit = ExpectedSystemExit.none();
   
	
	   @Test
	   //Test by Emil and Mikael.
	   public void test_diceValues() {
		   Dice die = new Dice();
		   die.ThrowDie(min,max);
		   assertTrue(die.GetValue() <= max && die.GetValue() >= min);
	   }
	   
	   //Test written by Mikael
	   //implementing refactor code.
	   //Testing if exception is thrown if more than 5 dices are thrown
	   @Test(expected=IndexOutOfBoundsException.class)
	   public void test_numberOfDicesExceptionTest_HighValue(){
		   game g = new game();
		   g.ThrowDices(6);
	   }
	   
	   @Test(expected=IndexOutOfBoundsException.class)
	   public void test_numberOfDicesExceptionTest_LowValue(){
		   game g = new game();
		   g.ThrowDices(4);
	   }
	   
	   @Test(expected=InputMismatchException.class)
	   public void test_MenuChoiceExceptionTest_NotInteger(){
		   ByteArrayInputStream in = new ByteArrayInputStream("t".getBytes());
		   game g = new game();
		   g.menuInput(in);
	   }
	   
	   @Test(expected=IndexOutOfBoundsException.class)
	   public void test_MenuChoiceExceptionTest_NotInRange_TooLow(){
		   ByteArrayInputStream in = new ByteArrayInputStream("0".getBytes());
		   game g = new game();
		   g.menuInput(in);
	   }
	   
	   @Test(expected=IndexOutOfBoundsException.class)
	   public void test_MenuChoiceExceptionTest_NotInRange_TooHigh(){
		   ByteArrayInputStream in = new ByteArrayInputStream("4".getBytes());
		   game g = new game();
		   g.menuInput(in);
	   }
	   
	   
	   
	   
	  
	   @Test(expected=IndexOutOfBoundsException.class)
	   public void test_CheckDiceListSize(){
		   game g = new game();
		   g.ThrowDices(5);
		   g.PrintResult(4);
	   }

	   //Testing the dice console output of the PrintResult() method
	   //Test written by Mikael
	  @Test
	   public void test_resultOutput() {
	       game g = new game();
	       Dice d = new Dice();
	       
	       d.ThrowDie(min, max);
	       d.SetValue(1);
	       g.diceList.clear();
	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       System.setOut(new PrintStream(outContent));
	       g.PrintResult(5);
	       
	       assertEquals("1 1 1 1 1 ", outContent.toString());
	       //Resets the outContent so that nothing will go wrong next time it is used
	       //g.outContent.reset();
	       
	   }
	   
	   @Test
	    public void Test_systemExit() {
		    exit.expectSystemExitWithStatus(0);
			ByteArrayInputStream in = new ByteArrayInputStream("3".getBytes());
			game g = new game();
			g.menuInput(in);
	       
	        
	    }
	   
	   @Test
	   public void test_ThrowDiceMenu(){
		   
		   game g = new game();
		   g.ThrowDices(5);
		   g.PrintResult(5);
		  
		   assertEquals(g.ListSize(), 5);
	   }
	   
	   @Test
	   public void Test_RemoveDieFromList_ToBeRethrown(){
		   
		   game g = new game();
	       Dice d = new Dice();
	       d.ThrowDie(min, max);

	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       
	       g.ShowRethrowMenu("3"); 
		   assertEquals(g.ListSize(), 4);
	   }
	   
	   @Test
	   public void Test_RemoveDieFromList_ToBeRethrown_MultipleDices(){
		   
		   game g = new game();
	       Dice d = new Dice();
	       d.ThrowDie(min, max);

	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       
	       g.ShowRethrowMenu("3 4 5"); 
		   assertEquals(g.ListSize(), 2);
	   }
	   
	   @Test(expected=NumberFormatException.class)
	   public void Test_RemoveDices_WrongDatatypeInput(){
		   
		   game g = new game();

	       g.ShowRethrowMenu("h"); 
	   }
	   
	   
	   @Test
	   public void Test_RemoveDieFromList_ToBeRethrown_AllDices(){
		   
		   game g = new game();
	       Dice d = new Dice();
	       d.ThrowDie(min, max);

	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       
	       g.ShowRethrowMenu("3 5 1 2 4"); 
		   assertEquals(g.ListSize(), 0);
	   }
	   
	   @Test(expected=IllegalArgumentException.class)
	   public void Test_RemoveDieFromList_ToBeRethrown_AllDices_OneOutOfRange(){
		   
		   game g = new game();
	       Dice d = new Dice();
	       d.ThrowDie(min, max);

	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       
	       g.ShowRethrowMenu("3 7 1 2 4"); 
		  
	   }
	   
	   @Test(expected=IllegalArgumentException.class)
	   public void Test_RemoveDieFromList_ToBeRethrown_AllDices_OneNegativeNumber(){
		   
		   game g = new game();
	       Dice d = new Dice();
	       d.ThrowDie(min, max);

	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       g.diceList.add(d);
	       
	       g.ShowRethrowMenu("-1 3 1 2 4"); 
		  
	   }
	   
	   //Test code below - Ignore it!
	   
	   
	   @Test
	   public void test_mock(){
	        game g = mock(game.class);
	        Points p = mock(Points.class);
	        //g.ThrowDices(5);
	        g.ShowRethrowMenu("0"); 
	        when(p.Getpoints(123)).thenReturn(123);
	        assertEquals(1,c.compareTo("Test"));
	        //verify(p, times(0)).Getpoints();
	   }
	   
	   
	//Test returning a specific dice that should be rethrown
}
